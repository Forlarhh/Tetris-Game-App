name: Sync Vault Secrets to Azure DevOps

on:
  schedule:
    - cron: '*/30 * * * *'  # Run every 30 minutes
  workflow_dispatch:  # Enables manual triggering in the GitHub Actions UI

jobs:
  check_secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install hvac requests

      - name: Create Check Secrets Script
        run: |
          echo "
import os
import hvac
import json

try:
    vault_addr = os.getenv('VAULT_ADDR')
    role_id = os.getenv('VAULT_ROLE_ID')
    secret_id = os.getenv('VAULT_SECRET_ID')
    previous_secrets_file = 'previous_secrets.json'

    # Initialize Vault client
    client = hvac.Client(url=vault_addr)
    client.auth.approle.login(role_id=role_id, secret_id=secret_id)

    # Fetch secrets
    secrets = client.secrets.kv.v2.read_secret_version(path='secret/azure')['data']['data']

    # Load previous secrets
    if os.path.exists(previous_secrets_file):
        with open(previous_secrets_file, 'r') as f:
            previous_secrets = json.load(f)
    else:
        previous_secrets = {}

    # Compare secrets
    if secrets != previous_secrets:
        # Save the new secrets
        with open(previous_secrets_file, 'w') as f:
            json.dump(secrets, f)
        print('Secrets have changed.')
        with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_out:
            gh_out.write('trigger=true\n')
    else:
        print('No changes detected in secrets.')
        with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_out:
            gh_out.write('trigger=false\n')
except Exception as e:
    print(f'Error occurred: {e}')
    exit(1)
          " > check_secrets.py

      - name: Run Check Secrets Script
        id: check_secrets
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
          VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
        run: |
          source venv/bin/activate
          python check_secrets.py

      - name: Trigger Azure DevOps Pipeline
        if: steps.check_secrets.outputs.trigger == 'true'
        env:
          AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
        run: |
          organization='Forlarhh'
          project='Vault'
          pipeline_id='4'
          url="https://dev.azure.com/$organization/$project/_apis/pipelines/$pipeline_id/runs?api-version=6.0-preview.1"
          
          # Trigger the Azure DevOps pipeline
          curl -X POST -H "Authorization: Basic $(echo ":$AZURE_DEVOPS_PAT" | base64)" $url
          echo "Pipeline triggered successfully!"
