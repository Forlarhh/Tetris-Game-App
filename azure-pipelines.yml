trigger: none

pool:
  name: Forlarhh2
  vmImage: 'windows-latest'

variables:
  VAULT_ADDR: $(http://127.0.0.1:8200)
  VAULT_ROLE_ID: $(dd32cdf3-7a48-1640-b970-d7e17b189c39)
  VAULT_SECRET_ID: $(b4cc5365-ed55-5220-7fff-82f51b52901c)

steps:
  # Install Vault CLI
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        Write-Output "Installing Vault CLI..."
        Invoke-WebRequest -Uri https://releases.hashicorp.com/vault/1.10.0/vault_1.10.0_windows_amd64.zip -OutFile vault.zip
        Expand-Archive -Path vault.zip -DestinationPath "$env:ProgramFiles\vault"
        $env:Path += ";$env:ProgramFiles\vault"
        vault --version

  # Authenticate to Vault and retrieve secrets
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        # Define Vault variables
        $vaultAddr = "$(http://127.0.0.1:8200)"
        $roleId = "$(dd32cdf3-7a48-1640-b970-d7e17b189c39)"
        $secretId = "$(b4cc5365-ed55-5220-7fff-82f51b52901c)"

        # Authenticate with Vault using AppRole
        $vaultToken = vault write -field=token auth/approle/login role_id=$roleId secret_id=$secretId

        # Fetch secrets
        $clientId = vault kv get -field=value secret/data/azure/client_id
        $clientSecret = vault kv get -field=value secret/data/azure/client_secret

        # Set environment variables for subsequent steps
        Write-Output "##vso[task.setvariable variable=ARM_CLIENT_ID]$clientId"
        Write-Output "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$clientSecret"
    displayName: 'Retrieve Secrets from Vault'

  # Additional deployment steps
  - script: |
      # Use the secrets stored as environment variables in the pipeline
      echo "Client ID: $env:ARM_CLIENT_ID"
      echo "Client Secret is fetched and used securely"
    displayName: 'Use Secrets in Deployment'
